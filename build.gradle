plugins {
    id 'org.springframework.boot' version '1.5.8.RELEASE'
    id 'org.sonarqube' version '2.6'
    id 'org.ajoberstar.grgit' version '2.2.0'
    id "com.moowork.node" version "1.2.0"
}

apply plugin: 'java'
def targetJavaVersion = JavaVersion.VERSION_1_8;
sourceCompatibility = "${targetJavaVersion}"
targetCompatibility = "${targetJavaVersion}"

apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'com.moowork.node'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

group = 'org.sitmun'
if (project.hasProperty("customVersion")) {
  version = project.customVersion
} else {
  version = "${sitmun_version}"
}

repositories {
    mavenLocal()
    mavenCentral()
}

bootRepackage {
    enabled = false
}

// Dependencies to other SITMUN plugins must declared all here to facilitate using them
// in different places of this script
ext {    
    sitmunlibs = [:]
    sitmunlibs.sitmuncore = [
      gitrepo   : 'https://github.com/sitmun/sitmun-plugin-core.git',
      groupId   : 'org.sitmun',
      artifactId: 'sitmun-plugin-core',
      version   : 'master'
    ]
}

dependencies {    
    sitmunlibs.each { k,v -> implementation "${v.groupId}:${v.artifactId}:${v.version}" }

    implementation "org.webjars:webjars-locator"
    implementation "org.webjars:bootstrap:${bootstrap_version}"
    implementation "org.webjars:requirejs:${requirejs_version}"

    testImplementation 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

task checkJavaVersion {
  description = 'Checking java version.'
    if (!JavaVersion.current().equals(targetJavaVersion)) {
        String message = """
ERROR: Java ${targetJavaVersion} JDK required but ${JavaVersion.current()} found. 
SOLUTION: 
  a) Point JAVA_HOME to a ${targetJavaVersion} JDK and then run gradle, or
  b) Run ./gradlew -Dorg.gradle.java.home=/path_to_jdk_${targetJavaVersion}_directory"""
        throw new GradleException(message)
    }
}

compileJava.dependsOn checkJavaVersion

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId group
            artifactId 'sitmun-plugin-demo'
            version version

            from components.java
        }
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'sitmun'     
    }
}

sourceSets {
  main {
    resources {
      srcDirs = ["$projectDir/dist", "$projectDir/src/main/resources"]
    }
  }
}

def cloneDir = file("$buildDir/plugins-src")

task clonePlugins {
  description = 'Clone SITMUN plugins from GitHub".'
  doLast {
    if (!cloneDir.exists()) {
      mkdir cloneDir
    }
    sitmunlibs.each { k, v ->
      def targetDir = file("$cloneDir/${v.artifactId}")
      if (!targetDir.exists()) {
        grgit.clone {
          dir = targetDir
          uri = "${v.gitrepo}"
          refToCheckout = "${v.version}"
        }
      }
    }
  }
}

clonePlugins.mustRunAfter clean

task installPlugins(dependsOn: clonePlugins) {
  description = 'Install Plugins.'
  doLast {
    // It creates a temporary GradleBuild task for each sitmun dependency in sitmunlibs
    // and runs the specified tasks for each
    sitmunlibs.each { k,v ->
      def targetDir = file("$cloneDir/${v.artifactId}/dist")
      if (!targetDir.exists()) {
        def tempTask = tasks.create(name: "install_module_${v.artifactId}", type: GradleBuild)
        tempTask.dir = file("$cloneDir/${v.artifactId}")
        tempTask.startParameter.projectProperties["customVersion"] = v.version
        tempTask.tasks = [ "install" ]
        tempTask.execute()
      }
    }
  }
}

installPlugins.mustRunAfter clonePlugins

task installModules(dependsOn: [installPlugins, npmInstall]) {
  doLast {
    sitmunlibs.values().each {
      def sourceDir = "$cloneDir/${it.artifactId}/dist" 
      ant.copy(todir: "node_modules") {
        fileset(dir: sourceDir)
      } 
    }
  }
}

installModules.mustRunAfter installPlugins
installModules.mustRunAfter npmInstall

installModules.mustRunAfter installPlugins
installModules.mustRunAfter npmInstall

task npmBuildSitmunPluginDemo(type: NpmTask, dependsOn: installModules) {
  description = 'Build module sitmun-plugin-demo.'
  args = ['run-script', 'build-sitmun-plugin-demo']
}

npmBuildSitmunPluginDemo.mustRunAfter installModules

processResources.dependsOn npmBuildSitmunPluginDemo
processResources.mustRunAfter npmBuildSitmunPluginDemo

task install(dependsOn: 'publishToMavenLocal')

def cacheDir = project.hasProperty("cacheDir")? project.properties.cacheDir : "${project.buildDir}" 

clean {
  delete "node_modules"
  delete "dist"
  delete "${cacheDir}"
}
