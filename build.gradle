plugins {
    id 'org.sonarqube' version '2.6'
    id 'org.ajoberstar.grgit' version '2.2.0'
    id "com.moowork.node" version "1.2.0"
}

apply plugin: 'base' // Requirede by the clean task if no other plugin that extends it exists (e.g. the Java plugin)
apply plugin: 'idea'
apply plugin: 'com.moowork.node'
apply plugin: 'jacoco'

group = 'org.sitmun'
if (project.hasProperty("customVersion")) {
  version = project.customVersion
} else {
  version = "${sitmun_version}"
}

repositories {
    mavenLocal()
    mavenCentral()
}

//bootRepackage {
//    enabled = false
//}

// Dependencies to other SITMUN plugins must declared all here to facilitate using them
// in different places of this script
ext {    
    // Node modules
      sitmunmodules = [:]
      sitmunmodules.sitmunfrontendcore = [
        gitrepo : 'https://github.com/sitmun/sitmun-frontend-core.git',
        groupId : 'org.sitmun',
        artifactId : 'sitmun-frontend-core',
        version : 'master'
      ]
      sitmunmodules.sitmunfrontendgui = [
              gitrepo : 'https://github.com/sitmun/sitmun-frontend-gui.git',
              groupId : 'org.sitmun',
              artifactId : 'sitmun-frontend-gui',
              version : 'master'
            ]
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'sitmun'
        // I assume the default source folder is src/main/java because of the java plugin
        // If that folder does not exist, adding another source (the else) does not work
        // properly
        properties["sonar.sources"] = 'src'
        // Excluding some code which, at least most if it, is a library that probably should not have been included as code
        property "sonar.exclusions", "src/main/angular-library/projects/sitmun-plugin-demo/src/lib/**/*"
    }    
}


/*sourceSets {
  main {
    resources {
      srcDirs = ["$projectDir/dist", "$projectDir/src/main/resources"]
    }
  }
}*/

def cloneDir = file("$buildDir/plugins-src")

task clonePlugins {
  description = 'Clone SITMUN plugins from GitHub".'
  doLast {
    if (!cloneDir.exists()) {
      mkdir cloneDir
    }
    sitmunmodules.each { k, v ->
      def targetDir = file("$cloneDir/${v.artifactId}")
      if (!targetDir.exists()) {
        grgit.clone {
          dir = targetDir
          uri = "${v.gitrepo}"
          refToCheckout = "${v.version}"
        }
      }
    }
  }
}

clonePlugins.mustRunAfter clean

task installPlugins(dependsOn: clonePlugins) {
  description = 'Install Plugins.'
  doLast {
    // It creates a temporary GradleBuild task for each sitmun dependency in sitmunmodules
    // and runs the specified tasks for each
    sitmunmodules.each { k,v ->
      def targetDir = file("$cloneDir/${v.artifactId}/dist")
      if (!targetDir.exists()) {
        def tempTask = tasks.create(name: "install_module_${v.artifactId}", type: GradleBuild)
        tempTask.dir = file("$cloneDir/${v.artifactId}")
        tempTask.startParameter.projectProperties["customVersion"] = v.version
        tempTask.tasks = [ "install" ]
        tempTask.execute()
      }
    }
  }
}

installPlugins.mustRunAfter clonePlugins

task installModules(dependsOn: [installPlugins, npmInstall]) {
  doLast {
    sitmunmodules.values().each {
      def sourceDir = "$cloneDir/${it.artifactId}/dist" 
      ant.copy(todir: "node_modules") {
        fileset(dir: sourceDir)
      } 
    }
  }
}

installModules.mustRunAfter installPlugins
installModules.mustRunAfter npmInstall


task npmBuildSitmunPluginDemo(type: NpmTask, dependsOn: installModules) {
  description = 'Build module sitmun-plugin-demo.'
  args = ['run-script', 'build-sitmun-plugin-demo']
}

npmBuildSitmunPluginDemo.mustRunAfter installModules

//processResources.dependsOn npmBuildSitmunPluginDemo
//processResources.mustRunAfter npmBuildSitmunPluginDemo

task install(dependsOn: 'npmBuildSitmunPluginDemo')

def cacheDir = project.hasProperty("cacheDir")? project.properties.cacheDir : "${project.buildDir}" 

clean {
  delete "node_modules"
  delete "dist"
  delete "${cacheDir}"
}
