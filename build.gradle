plugins {
    id 'org.springframework.boot' version '1.5.8.RELEASE'
    id 'org.sonarqube' version '2.6'
    id 'org.ajoberstar.grgit' version '2.2.0'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

group = 'org.sitmun'
version = '0.1.0-SNAPSHOT'

bootRepackage {
    enabled = false
}

repositories {
    mavenLocal()
    mavenCentral()    
}

// Dependencies to other SITMUN plugins must declared all here to facilitate using them
// in different places of this script
ext {    
    sitmunlibs = [:]
    sitmunlibs.sitmuncore = [
        gitrepo : 'https://github.com/sitmun/sitmun-plugin-core.git',
        groupId : 'org.sitmun',
        artifactId : 'sitmun-plugin-core',
        version : '0.1.0-SNAPSHOT'
    ]
}

dependencies {    
    sitmunlibs.each { k,v -> implementation "${v.groupId}:${v.artifactId}:${v.version}" }
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-tomcat'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId group
            artifactId 'sitmun-plugin-demo'
            version version

            from components.java
        }
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'sitmun'     
    }
}

task cloneDependencyRepos() {
    description = 'Clone the git repositories declared in sitmunlibs to a temporary directory.'        
    // Create temporary directory
    ext.plugindir = File.createTempDir().toString()    
    doLast {        
        sitmunlibs.each { k, v ->            
            grgit.clone(dir: "${cloneDependencyRepos.plugindir}/${v.artifactId}", uri: "${v.gitrepo}", refToCheckout: "${v.version}")
        }        
    }
}

task installDependencyRepos(dependsOn: 'cloneDependencyRepos') {    
    description = 'Install dependency repos, cleans and installs the git repositories declared in sitmunlibs in a temporary directory. Depends on cloneDependencyRepos.'        
    doLast {        
        sitmunlibs.each { k,v -> 
            def tempTask = tasks.create(name: "install_${v.artifactId}", type: GradleBuild)
            tempTask.buildFile = file("${cloneDependencyRepos.plugindir}/${v.artifactId}/build.gradle")            
            tempTask.tasks = ['clean', 'install']       
            tempTask.execute()
        }
        // Delete temporary directory
        delete cloneDependencyRepos.plugindir
    }
}

task install(dependsOn: ['publishToMavenLocal', 'installDependencyRepos'])
